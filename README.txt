Для проекта "честного измерения RMS" нужен был генератор сигнала.
В принципе не то, чтобы на STM32F0DISCOVERY этих сигналов не хватает... 
Принципиальное значение имеет, чтобы эти сигналы не были завязаны
на тактовую частоту измерителя.

Другой генератор был написан на такой же STM32F0DISCOVERY, неоднократно
горевшей в угли с перепаянным микроконтроллером, который в нужное время
оказался в ящике стола. Это был stm32L162RE. STMicroelectronics продвигает
соответствие выводов разных серий в одинаковых корпусах. При внимательном
сравнении оказалось, что выводы порта PF stm32f051R8 используются
в stm32L162RE как питание и земля, что я и обозначил сразу на плате.

Отличий в CMSYS предостаточно. System_HSE_init.c, System_HSI_init.c -
другие, тактовые частоты разные, регистры USRT разные...
С FreeRTOS я разбирался параллельно на обоих камнях.

Не забываем, что при портировании FreeRTOS добавляется файл portasm.s,
в котором есть #include <FreeRTOSConfig.h>, а в настройках проекта
у ассемблера свой препроцессор.
Сам FreeRTOSConfig.h, признаюсь, я сформировал в CubeMX.

Файлы System_HSE_init.c, System_HSI_init.c, в зависимости от включения в проект,
осуществляют настройки тактирования от HSE и HSI, соответственно.

MCO.c - удалять не стал, в проекте не используется.

Как моргают светодиоды мне нравится, на этом FreeRTOS в проекте заканчивается.

Файл Generator.c содержит код генератора синусоидального сигнала, аналогичный
коду генератора в проекте вольтметра. Аналогичные точки синуса грузятся по DMA
в DAC по 24-м событиям TIM6. Частота задается соответствующим параметром функции.
Все, что там написано, закомментировано и мне, интуитивно, понятно. Хочу обратить
внимание, что синус там крутится вокруг оси 1,65, не доходит до нуля и до 3,3 В.
Поэтому умножать его на корень из двух, для проверки амплитудного значения нет
никакого смысла. Все измерения проводились простым USB осциллографом, а, собственно,
больше и не чем.
Захотелось еще генерацию треугольника. Можно было сделать аналогично, но
захотелось поиграться с аппаратной реализацией. Тут тоже ничего сложного,
кроме того, как задавать параметром частоту.
Эмпирически формулу я написал:
TIM7_autoReloadRegister = APBCLK / 4095 / frequency / 2 - 1;
Двойка понятно, потому что период сначала вверх, потом вниз. А вот:
"Внутренний треугольный счетчик увеличивается на три такта APB1 после каждого
события запуска (RM0038)" - тройку куда присунуть я не понял.
Так или иначе проверил, до 100 Гц, вроде, корректно. Потом начинает подвирать,
что, собственно, тоже очевидно, поскольку деление целочисленное.

Картинки привожу на сайте. Генератор мне понравился.

Петр Мальцев.